{
title: "Minified.js beta 2: Features and Changes",
section: docs,
externalCss: ["../css/doc.css"],
main: `<div>
  <h1>Minified.js beta 2: Features and Changes</h1>

<p>I got a lot of great feedback for beta 1, including many feature requests. So Minified's beta 2 is mostly about adding new features. 
Here's a short overview of the API changes: 
</p>

<h2>New: Property-based DOM tree traversal with trav()</h2>
<p>
The new method <span class="var"><a href="/api/trav.html">trav()</a></span> lets you traverse the DOM tree for each element 
in a <a href="/api/list.html">Minified list</a> and puts the result into a new list. You can specify a selector 
to limit the type of elements to include and a maximum number of elements to return per list element.
<span class="var">trav()</span> will automatically remove duplicates from the result.
</p>
<h5>Example: Finding all parents</h5>
<pre>var parents = $('.myChild').trav('parentNode', 1); // returns immediate parent of each element</pre>

<h5>Example: Finding all &lt;table>s that contain &lt;th> elements</h5>
<pre>var thTables = $('th').trav('parentNode', 'table', 1); // tables with</pre>

<h5>Example: Finding all &lt;li>s following a &lt;li class='marker'></h5>
<pre>var followLi = $('li.marker').trav('nextSibling', 'li');</pre>


<h2>New: Checking list elements against a selector with is()</h2>
<p><span class="var"><a href="/api/is.html">is()</a></span> executes a selector on the <a href="/api/list.html">list</a> elements and 
returns <span class="var">true</span> only if all list members match. It is optimized for checking for classes and/or tag names, but will work 
with any selector.</p>

<h5>Example: Check whether list members have a class</h5>
<pre>var areMyElements = $('li').is('.myElement');</pre>

<h5>Example: Check whether input elements are in a form</h5>
<pre>var areInForm = $('input').is('form input');</pre>


<h2>New: Selecting child elements with select()</h2>
<p><span class="var"><a href="/api/select.html">select()</a></span> is a convenience method for selecting elements in a context. In beta 2, if 
you had a list and wanted to find all &lt;p> elements in it, you had to write</p>
<pre>var paras = $('p', list);</pre>
<p>Having to write the list element inside the <span class="var"><a href="/api/dollar.html">$()</a></span> is a bit inconvenient when you
are chaining methods, so <span class="var">select()</span> does exactly the same with a different syntax:
<pre>var paras = list.select('p');</pre>


<h2>New: Filtering HTML elements with only()</h2>
<p><span class="var"><a href="/api/only.html">only()</a></span> is a new way to filter a <a href="/api/list.html">list</a> containing
HTML elements with a selector. Like <span class="var"><a href="/api/is.html">is()</a></span> it is optimized for checking for classes
and/or tag names, but will work with any selector. </p>

<h5>Example: Getting a list of all table cells that have two classes</h5>
<pre>var areMyElements = $('td.myFirstClass').only('.mySecondClass');</pre>


<h2>New: Registering for mouse-over events using onOver()</h2>
<p><span class="var"><a href="/api/onover.html">onOver()</a></span> registers event listeners to be invoked when the mouse
cursor enters or leaves the list's HTML elements. As first parameter it receives a boolean that's <span class="var">true</span> when the
mouse is over the element and <span class="var">false</span> when it left the element. This makes <span class="var">onOver()</span> compatible with
<span class="var"><a href="/api/toggle.html">toggles</a></span>.</p>

<h5>Example: Creating your own mouseover handler</h5>
<pre>$('.monitored').onOver(function(isOver, index) {
    if (isOver) 
        console.log('Mouse entered: ', this);
    else 
        console.log('Mouse left: ', this);
});</pre>

<h5>Example: Creating a mouseover toggle</h5>
<pre>$(elem).onOver($(elem).toggle({backgroundColor: '#000'}, {backgroundColor: '#f00'}));</pre>


<h2>New: Triggering existing and custom events with trigger()</h2>
<p>The new method <span class="var"><a href="/api/trigger.html">trigger()</a></span> can call any event previously registered
with  <span class="var"><a href="/api/on.html">on()</a></span>. You can call regular event handlers such as 'click', but also
create your own event handler names and call them. <span class="var">trigger()</span> emulates event bubbling, but will not send a DOM
event to the browser and thus does not emulate the event default behaviour.
</p>

<h5>Example: Calling a click handler</h5>
<pre>$('#myButton').trigger('click');</pre>

<h5>Example: Calling a custom event handler with event object</h5>
<pre>$('#layoutRoot').trigger('relayout', {width: 800, height: 600});</pre>



<h2>New: Reading forms with values()</h2>
<p><span class="var"><a href="/api/values.html">values()</a></span> will read forms or individual input elements and
store them in a format that's compatible with <span class="var"><a href="/api/request.html">$.request()</a></span>.</p>

<h5>Example: Posting a form</h5>
<pre>$.request('POST', '/myService', $('#myForm').values());</pre>


<h2>New: Extending Minified lists with MINI.M</h2>
<p>In beta 1 there was no good way of adding your own methods to 
<a href="/api/list.html">Minified lists</a>. Beta 2 exposes Minified's internal list class with the property
<span class="var"><a href="/api/M.html">MINI.M</a></span>.  
</p>

<h5>Example: Extending Minified with a method to get all child elements</h5>
<pre>MINI.M.prototype.children = function() { return $('*', this, true); };
var children = $('#parent').children();</pre>


<h2>New: Reading and writing data attributes with a % prefix</h2>
<p>As data attributes (attributes with a 'name-' prefix) are quite popular, I have added a new prefix to 
<span class="var"><a href="/api/get.html">get()</a></span>,  <span class="var"><a href="/api/set.html">set()</a></span> and all other
methods that share the syntax. The prefix '%' is now equivalent to '@data-'. 
</p>

<h5>Example: Reading a data attribute</h5>
<pre>var mymeta = $('#myElement').get('%mymeta'); // same as .get('@data-mymeta')</pre>



<h2>New: Selectors for on() (live/delegated events)</h2>
<p>Due to popuplar demand, <span class="var"><a href="/api/on.html">on()</a></span> now has an optional <span class="var">selector</span>
parameter that can be used to filter events that bubbled up from child elements. This allows you to set up
event handlers in parent elements and let events bubble up, so you need fewer (potentially resource-hungry)
event handlers. Also, you may not need to add new event handlers when you add child elements to a monitored
parent element, which is mostly useful if you work with <span class="var">innerHTML</span>.
</p>

<h5>Example: Creating a selecting event handler</h5>
<pre>$('#container').on('click', 'div.clickable', clickHandler);</pre>



<h2>Change: $() will remove duplicates</h2>
<p>In beta 1, lists returned by <span class="var"><a href="/api/dollar.html">$()</a></span> may contain duplicate elements.
In beta 2, duplicates caused by selectors or having multiple elements in the context will be automatically
removed.</p>


<h2>Change: Animated toggles return their Promise</h2>
<p><span class="var"><a href="/api/toggle.html">Toggle functions</a></span> with animations will now return the animation's
<a href="/api/promise.html">Promise</a>. This allows compositing more complex animations with toggles,
which may be part of the upcoming App module.</p>


<h2>Removed: hasClass()</h2>
<p>The <span class="var">hasClass()</span> method has been removed because <span class="var"><a href="/api/is.html">is()</a></span> allows
checking for classes. </p>


<h2>Removed: wait()</h2>
<p><span class="var">wait()</span>, which returned a timed <a href="/api/promise.html">Promise</a>, has been removed from the Web
module, but will re-appear in the Util module.</p>


<h2>Removed: Promise.always()</h2>
<p><span class="var">Promise.always()</span> has been removed because it is not that useful and in order to keep the Web module
small, but will probably re-appear in the Util module.</p>

<h2>Implementation: Preventing legacy IE memory leaks</h2>
<p>Beta 2 tries to prevent event-related memory leaks in IE by removing event handlers from deleted nodes
and also unregistering all handlers on <span class="var">unload</span>. In beta 2 the user was responsible for managing old
event handlers. Please note that in order for the automatic code to work, you must remove DOM nodes only
using <span class="var"><a href="/api/remove.html">remove()</a></span> and <span class="var"><a href="/api/fill.html">fill()</a></span>.
</p>

<h2>Builder: IE9 Compatibility Optional</h2>
<p>In the wake of IE11's coming release, I have made some smaller IE9-compatibility fixes optional. If you
only need to support the latest two versions of any browser, you can save a couple of bytes (but not more!) by
disabling IE9 in the builder. The main reason for this change is to make sure fixes for IE9-compatibility are properly
marked in the source and can be removed at some point in the far future.</p>


<h2>Download</h2>
<p>You can download beta 2 on the <a href="/download">download page</a>.</p>


  </div>`
  
}


  