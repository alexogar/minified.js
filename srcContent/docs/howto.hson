{
title: 'How to... Common Minified Tasks',
section: docs,
externalCss: ['../css/doc.css'],
main: `<div>
  <h1>How to... Common Minified Tasks</h1>

<h2>Overview</h2>
<ul>
<li><a href="#select">Work with Selectors and Lists</a><ul>
 <li><a href="#select_children">Find Elements</a></li>
 <li><a href="#select_allchildren">Find All Child Elements</a></li>
 <li><a href="#select_childnodes">Find Child Nodes</a></li>
 <li><a href="#select_otherchildren">Find Every Second Element</a></li>
 <li><a href="#select_combinechildren">Combine Lists</a></li>
 <li><a href="#select_findparent">Find a Specific Parent</a></li>
 <li><a href="#select_checkparent">Check Whether an Element is a Parent</a></li>
 <li><a href="#select_sibling">Get an Element's Next Sibling</a></li>
 <li><a href="#select_abort">Abort an each() Loop</a></li>
 <li><a href="#select_extend">Extend Minified Lists with New Methods</a></li>
</ul></li>
<li><a href="#html">Modify HTML Structure</a><ul>
 <li><a href="#html_text">Set Text Content</a></li>
 <li><a href="#html_readtext">Read Text Content</a></li>
 <li><a href="#html_innerhtml">Set InnerHTML</a></li>
 <li><a href="#html_addhtml">Append HTML</a></li>
 <li><a href="#html_create">Create HTML Elements</a></li>
 <li><a href="#html_add">Add HTML Elements or Text</a></li>
 <li><a href="#html_replace">Replace HTML Elements</a></li>
 <li><a href="#html_remove">Remove HTML Elements or Nodes</a></li>
 <li><a href="#html_removechildren">Remove Children of HTML Elements</a></li>
 <li><a href="#html_attr">Set and Read Attributes</a></li>
 <li><a href="#html_clone">Clone Elements</a></li>
</ul></li>
<li><a href="#style">Modify HTML Styles</a><ul>
 <li><a href="#style_classes">Add / Remove / Toggle CSS Classes</a></li>
 <li><a href="#style_hasclass">Check for CSS Classes</a></li>
 <li><a href="#style_set">Set and Read CSS Styles</a></li>
 <li><a href="#style_prop">Set and Read Properties</a></li>
</ul></li>
<li><a href="#anim">Animation</a><ul>
 <li><a href="#anim_anim">Animate Styles and Properties</a></li>
 <li><a href="#anim_chain">Chain Animation Steps</a></li>
 <li><a href="#anim_toggle">Toggle Styles and Properties</a></li>
 <li><a href="#anim_fade">Fade in / Fade Out (Animation)</a></li>
 <li><a href="#anim_slide">Slide in / Slide Out (Animation)</a></li>
 <li><a href="#anim_loop">Create Complex Animations (Loop)</a></li>
</ul></li>
<li><a href="#event">Events</a><ul>
 <li><a href="#event_events">Register / Unregister Event Handlers</a></li>
 <li><a href="#event_onover">Register for Mouseover Events</a></li>
 <li><a href="#event_onchange">Monitor an Input Field</a></li>
 <li><a href="#event_selector">Select Bubbled Events (Live/Delegates Events)</a></li>
 <li><a href="#event_trigger">Trigger an Event</a></li>
 <li><a href="#event_custom">Create Custom Events</a></li>
</ul></li>
<li><a href="#data">Forms and Data</a><ul>
 <li><a href="#data_post">Do HTTP Requests (AJAX / XHR)</a></li>
 <li><a href="#data_values">Read and Submit a Form</a></li>
 <li><a href="#data_json">Use JSON</a></li>
 <li><a href="#data_resttemplate">Create a Rest-style URL</a></li>
 <li><a href="#data_cookie">Read / Write / Delete Cookies</a></li>
</ul></li>
 <li><a href="#formats">Templates and Formats</a><ul>
 <li><a href="#formats_formatnumber">Format a Number</a></li>
 <li><a href="#formats_formatdate">Format a Date</a></li> 
 <li><a href="#formats_parsedate">Parse a Date</a></li>
 <li><a href="#formats_createtemplate">Formats and Templates</a></li>
</ul></li>

<li><a href="#something_missing">Missing Something?</a></li>
</ul>


<h2><a name="select">Work with Selectors and Lists</a></h2>
<h3><a name="select_children">Find Elements</a></h3>
<p>
Creating a list containing only the element with the id 'a':
<pre>var l = $('#a');</pre>
Creating a list containing only those element that have the class 'b':
<pre>var l = $('.b');</pre>
The default build of Minified uses the browser's built-in engine for selectors. If you chose a build with
legacy Internet Explorer compatibility, you are limited to CSS1 selectors. 
</p>
<p>
API: <a href="/api/dollar.html">$()</a>.<br/>
JSFiddle Example: <a href="http://jsfiddle.net/tjansen/Vmr6z/">Selector</a>
</p>


<h3><a name="select_allchildren">Find All Child Elements</a></h3>
<p>
Finding all child elements of the element '#parent':
<pre>var l = $('*', '#parent', true);</pre>
The selector '*' is used to select all child elements. The third argument, if <span class="var">true</span>, limits 
matches to direct children of the context nodes, instead of matching all descendants.<br/>
If you have an existing list, you can alternatively use <span class="var">select()</span>:
<pre>var l = myList.select('*', true);</pre>
</p>
<p>
API: <a href="/api/dollar.html">$()</a>, <a href="/api/select.html">select()</a>.<br/>
JSFiddle Example: <a href="http://jsfiddle.net/tjansen/6BHAt/">Child Elements</a>
</p>


<h3><a name="select_childnodes">Find Child Nodes</a></h3>
<p>
Finding all child nodes of the element '#parent' (ALL nodes, not only the elements):
<pre>var l = $('#parent').collect(function(e) { return e.childNodes; });</pre>
Use <span class="var">collect()</span> to create a list that's derived from another one. Minified has no 
direct support for getting child nodes, so you need to work with this helper function here.
</p>
<p>
API: <a href="/api/dollar.html">$()</a>, <a href="/api/collect.html">collect()</a>.<br/>
</p>


<h3><a name="select_otherchildren">Find Every Second Element</a></h3>
<p>
Finding every second &lt;li> element in '#parent':
<pre>var l = $('#parent li').filter(function(e, index) { return index % 2; });</pre>
The <span class="var">filter()</span> function filters all elements that have an even index.
</p>
<p>
API: <a href="/api/dollar.html">$()</a>, <a href="/api/filter.html">filter()</a>.<br/>
JSFiddle Example: <a href="http://jsfiddle.net/tjansen/FXGce/">Filter</a>
</p>


<h3><a name="select_combinechildren">Combine Lists</a></h3>
<p>
If you have the Util module, use <var>_()</var>:
<pre>var l = _([list1, list2]);</pre>
The Web module's <var>$()</var> is similar:
<pre>var l = $([list1, list2]);</pre>
The difference between both ways is that <var>$()</var> will automatically flatten nested lists  
and <span class="var">null</span> elements will be removed. <var>_()</var> will not modify the lists
but just concatenate them.<br/>
You can also use the same syntax to add elements to the list:
<pre>var l2 = _([list1, element1, element2]);</pre>
or 
<pre>var l2 = $([list1, element1, element2]);</pre>
Again, <var>$()</var> will remove null elements from the results, but <var>_()</var> will not.
</p>
<p>
API: <a href="/api/dollar.html">$()</a>.<br/>
</p>


<h3><a name="select_findparent">Find a Specific Parent</a></h3>
<p>
<pre>var specialParent = $(child).trav('parentNode', '.special');</pre>
<span class="var">trav()</span> allows you to select all nodes visited when traversing the specified property. Here, the 
property is 'parentNode', to traverse through all parent nodes. The second parameter is a selector that 
describes the element you are looking for. Only elements that match it will be in the resulting list.
</p>
<p>
API: <a href="/api/trav.html">trav()</a>.<br/>
</p>


<h3><a name="select_checkparent">Check Whether an Element is a Parent</a></h3>
<p>
<pre>var isParent = $(child).trav('parentNode', parent).length > 0;</pre>
The easiest way to find out whether an element is a parent node is to use <span class="var">trav()</span> to travel up the parent chain. 
The second parameter specifies that only <span class="var">parent</span> matches. Thus you get an empty list 
if <span class="var">parent</span> is not 
the parent of <span class="var">child</span>, or a list containing <span class="var">parent</span> if it is.</p><p>
There is an alternative way to do this, by selecting all descendants of the parent, but it is much slower in most 
situations:
<pre>var isParent = $('*', parent).find(child) != null;</pre>
</p>
<p>
API: <a href="/api/find.html">find()</a>, <a href="/api/trav.html">trav()</a>.<br/>
</p>


<h3><a name="select_sibling">Get an Element's Next Sibling</a></h3>
<p>
<pre>var siblings = myList.trav('nextSibling', 1);</pre>
You can use <span class="var">trav()</span> to get the next sibling for each element in the list and 
include them in a new list.
</p>
<p>
API: <a href="/api/trav.html">trav()</a>.<br/>
</p>


<h3><a name="select_abort">Abort an each() Loop</a></h3>
<p>

Just use <var>find()</var> instead of <var>each()</var>, and return a value to abort:
<pre>$('#parent input').find(function(input, index) { 
    if (input.value == '') {
        alert('You must enter something into all fields');
        return true;
    }
});</pre>
</p>
<p>
API: <a href="/api/find.html">find()</a>.<br/>
</p>


<h3><a name="select_extend">Extend Minified Lists with New Methods</a></h3>
<p>
<pre>MINI.M.prototype.children = function() { return $('*', this, true); };
var children = $('#parent').children();</pre>
Minified's internal class for lists is exposed as <span class="var">MINI.M</span>. This allows you to add 
new methods or modify existing methods.
</p>
<p>
API: <a href="/api/M.html">MINI.M</a>.<br/>
</p>



<h2><a name="html">Modify HTML Structure</a></h2>
<h3><a name="html_text">Set Text Content</a></h3>
<p>
<pre>$('#myElement').fill("My new text");</pre>
The <span class="var">fill()</span> method replaces an element's content with the given argument. If you pass a string,
it will replace the old content with a new text node. You can also use it to add other elements as new content.
</p>
<p>
API: <a href="/api/fill.html">fill()</a>.<br/>
JSFiddle Example: <a href="http://jsfiddle.net/tjansen/MKWTp/">fill()</a>
</p>

<h3><a name="html_readtext">Read Text Content</a></h3>
<p>
<pre>var textContent = $('#myElement').text();</pre>
The <span class="var">text()</span> method reads the text content of an HTML node. If you specify a list of nodes, or an element
with nested elements, the content will be concatenated.
</p>
<p>
API: <a href="/api/text.html">text()</a>.<br/>
</p>

<h3><a name="html_innerhtml">Set InnerHTML</a></h3>
<p>
<pre>$('.display').ht("My &lt;b>HTML&lt;/b>");</pre>
You can use <span class="var">ht()</span> to set the <span class="var">innerHTML</span> property of list members. HT stands for HTML template. 
It supports the full <span class="var">template()</span> syntax and offers automatic HTML escaping:
<pre>$('.name').ht("{{firstName}} &lt;b>{{lastName}}&lt;/b>", {firstName: 'Mike', lastName: 'Bar'});</pre>
Please note that <span class="var">ht()</span> requires the complete Minfied distribution. If you only want to use the Web module, 
you need to resort to set() or using <span class="var">innerHTML</span> directly:
<pre>$('.display').set("innerHTML", "My &lt;b>HTML&lt;/b>");
$$('#myElement').innerHTML = "My &lt;b>HTML&lt;/b>";</pre>
</p>
<p>
API: <a href="/api/ht.html">ht()</a>, <a href="/api/set.html">set()</a>, <a href="/api/template.html">template()</a>, <a href="/api/dollardollar.html">$$()</a>.<br/>
JSFiddle Examples: <a href="http://jsfiddle.net/tjansen/HUzFh/">ht()</a>, <a href="http://jsfiddle.net/tjansen/tzett/">InnerHTML</a>,
<a href="http://jsfiddle.net/tjansen/H3VLW/">Number Formats</a>, <a href="http://jsfiddle.net/tjansen/rtNG5/">Date Formats</a>.
</p>

<h3><a name="html_addhtml">Append HTML</a></h3>
<p>
<pre>$('.myClass').add(HTML("&lt;hr/>My Footer"));</pre>
You can create one or more DOM nodes using <span class="var">HTML()</span>. They can be added using <span class="var">add()</span>, <span class="var">fill()</span>, <span class="var">addFront()</span> and other methods.
</p>
<p><span class="var">HTML()</span> supports the full <span class="var">template()</span> syntax and and automatically escapes HTML:
<pre>$('li.names').add(HTML(" &lt;li>{{firstName}} {{lastName}}&lt;/li>", {firstName: 'Mike', lastName: 'Bar'}));</pre>
</p>
<p>
Please note that <span class="var">HTML()</span> requires the complete Minfied distribution. If you only want to use the Web module, 
you need to resort to set() or using <span class="var">innerHTML</span> directly:
<pre>$$('#myElement').innerHTML += "&lt;hr/>My Footer";</pre>
Modifing the <span class="var">innerHTML</span> property like that is only possible when you modify a single element. 
If your list has more than one element,  you need to write a <span class="var">set()</span> callback like this:
<pre>$('.display').set("innerHTML", function(old) {return old + "My &lt;b>HTML&lt;/b>"; });</pre>
</p>
<p>
API: <a href="/api/add.html">add()</a>, <a href="/api/html.html">HTML()</a>, <a href="/api/set.html">set()</a>, <a href="/api/dollardollar.html">$$()</a>.<br/>
JSFiddle Examples: <a href="http://jsfiddle.net/tjansen/V5yWf/">HTML()</a>, <a href="http://jsfiddle.net/tjansen/tzett/">InnerHTML</a>.
</p>



<h3><a name="html_create">Create HTML Elements</a></h3>
<p>
<pre>var div = EE('div');</pre>
Minified makes it easy to create DOM elements. The line above creates a simple &lt;div> element, wrapped in a <a href="/api/list.html">list</a>:
<pre>var actualDiv = div[0];</pre>
The reason for the element being in a list is just that you can use the list to add event handlers or modify it in other ways.
There is a number of methods to add elements, both in the list-wrapped form as well as the simple reference, to the DOM:
<pre>$('.container').add(div);          // add as last child
$('.container2').fill(div);        // replace all children
$('.something').addFront(div);     // add as first child
$('.something2').addBefore(div);   // add as sibling in front of..
$('.something3').addAfter(div);    // add as sibling after..
$('.oldElement').replace(div);     // replace element</pre>

The elements created by <span class="var">EE()</span> can receive an object containing <span class="var">set()</span> arguments to set CSS classes, styles, attributes and properties.
You can also either pass a string to set a text node as child, add another element factory with children, or a list that mixes both:
<pre>$('.todo').add(EE('ol', {$: 'groceries'}, [
	EE('li', 'Milk'),
	EE('li', {$: 'important'}, 'Bread'},
	EE('li', ['2x ', EE('a', {'@href': 'http://en.wikipedia.org/wiki/Twinkie'}, 'Twinkies'})])
]));
</pre>

The previous snippet will add the following HTML to all elements with the class .todo:
<pre>&lt;ol class='groceries'>
	&lt;li>Milk&lt;/li>
	&lt;li class='important'>Bread&lt;/li>
	&lt;li>2x &lt;a href="http://en.wikipedia.org/wiki/Twinkie">Twinkies&lt;/a>&lt;/li>
&lt;/ol>
</pre>
</p>
<p>An alternative to <span class="var">EE()</span> is the <span class="var">HTML()</span> function. It takes a HTML snippet and creates list-wrapped DOM nodes for it:
<pre>$('.something').addFront(HTML('&lt;b>important&lt;/b>'));</pre>
<span class="var">HTML()</span> also supports HTML templates with auto-HTML-escaping:
<pre>$('.something').addFront(HTML('&lt;b>{{firstName}} {{lastName}}&lt;/b>', {firstName: 'Tim', lastName: 'Taylor'}));</pre>
</p>
<p>
API: <a href="/api/add.html">add()</a>, <a href="/api/addafter.html">addAfter()</a>, <a href="/api/addbefore.html">addBefore()</a>, 
<a href="/api/addfront.html">addFront()</a>, <a href="/api/ee.html">EE()</a>, 
<a href="/api/html.html">HTML()</a>, <a href="/api/fill.html">fill()</a>, 
<a href="/api/replace.html">replace()</a>, <a href="/api/set.html">set()</a>.<br/>
JSFiddle Example: <a href="http://jsfiddle.net/tjansen/uRC8Y/">EE and add()</a>
</p>


<h3><a name="html_add">Add HTML Elements or Text</a></h3>
<p>
<pre>$('.container').add('Some text');                        // add text node
$('.container').add(EE('br'));                             // add &lt;br> element
$('.container').add(HTML('&lt;br>'));                         // alternative syntax
$('.container').add(document.createElement('br');          // another one
$('.container').add(['Some text', EE('br'), 'More text']); // add text and elements at once
</pre>
Beside <span class="var">add()</span>, you can use <span class="var">fill()</span> to replace children or <span class="var">addAfter()</span>, 
<span class="var">addBefore()</span> and <span class="var">addFront()</span> to position the elements relative to the list elements.
</p>
<p>
API: <a href="/api/add.html">add()</a>, <a href="/api/addafter.html">addAfter()</a>, <a href="/api/addbefore.html">addBefore()</a>, 
<a href="/api/addfront.html">addFront()</a>, <a href="/api/ee.html">EE()</a>, <a href="/api/fill.html">fill()</a>,
<a href="/api/html.html">HTML()</a>.<br/>
JSFiddle Example: <a href="http://jsfiddle.net/tjansen/uRC8Y/">EE and add()</a>
</p>


<h3><a name="html_replace">Replace HTML Elements</a></h3>
<p>
<pre>$('#oldElement').replace(EE('div', 'My new div'));</pre>
<span class="var">replace()</span> replaces the elements of the list with the given text or elements. It supports the same arguments 
as <span class="var">set()</span>.<br/>
If you want to replace the children of an element, instead of the element itself, you can also use <span class="var">fill()</span>:
<pre>$('#container').fill("New content.");</pre>
</p>
<p>
API: <a href="/api/add.html">add()</a>, <a href="/api/fill.html">fill()</a>, <a href="/api/ee.html">EE()</a>, 
<a href="/api/replace.html">replace()</a>.<br/>
</p>


<h3><a name="html_remove">Remove HTML Elements or Nodes</a></h3>
<p>
<pre>$('.oldStuff').remove();</pre>
Just use <span class="var">remove()</span> to remove elements from the DOM tree.
</p>
<p>
API: <a href="/api/remove.html">remove()</a>.<br/>
</p>

<h3><a name="html_removechildren">Remove Children of HTML Elements</a></h3>
<p>
<pre>$('.container').fill();</pre>
Call <span class="var">fill()</span> without arguments to remove all content of an element.
</p>
<p>
API: <a href="/api/fill.html">fill()</a>.<br/>
</p>

<h3><a name="html_attr">Get and Set Attributes</a></h3>
<p>
<pre>$('a.someLink').set({'@href': 'http://minifiedjs.com'});</pre>
Use <span class="var">set()</span> with a '@'-prefixed name to set attributes. <span class="var">get()</span> reads attributes 
with the same name syntax:
<pre>var link = $('a.someLink').get('@href');</pre>
For reading data attributes there's the special prefix '%' which makes it a bit shorter:
<pre>var link = $('#myDiv').get('%extra'); // same as get('@data-extra')</pre>
</p>
<p>
API: <a href="/api/get.html">get()</a>, <a href="/api/set.html">set()</a>.<br/>
</p>


<h3><a name="html_clone">Clone Elements</a></h3>
<p>
<pre>var createSheep = $('.sheep').clone();</pre>
<span class="var">clone()</span> creates a copy of the list's elements, their attributes and text nodes. 
You can add the copy to the HTML document using <span class="var">add()</span> and its variants:
<pre>$('#destination').add(createSheep);</pre>
</p>
<p>
API: <a href="/api/add.html">add()</a>, <a href="/api/clone.html">clone()</a>, 
<a href="/api/ee.html">EE()</a>.<br/>
JSFiddle Example: <a href="http://jsfiddle.net/tjansen/vuyh9/">clone()</a>
</p>


<h2><a name="style">Modify HTML Styles</a></h2>
<h3><a name="style_classes">Add / Remove / Toggle CSS Classes</a></h3>
<p>
<pre>$('.myClass').set('-oldClass +newClass toggleClass');</pre>
If you call <span class="var">set()</span> only with a string as argument, it 
will modify the elements' CSS classes. Several classes can be listed, separated by spaces. 
The prefix determines what to do: 
<ul><li>"-" removes the CSS class</li><li>"+" adds it</li><li>no prefix toggles</li></ul><br/>
You can also call <span class="var">set()</span> with the name "$" to do the same. This can be useful to modify 
several things at the same time:
<pre>$('.myClass').set({$: '-oldClass', $display: 'block');</pre>
</p><p>
Often it is simpler to create a toggle for CSS classes, as you can connect it directly to events:
<pre>var toggle = $('.myClass').toggle('toggleClass');
$('#toggleButton').on('click', toggle);
$('#onButton').on('click', toggle, [true]);
$('#offButton').on('click', toggle, [false]);</pre>
</p>
<p>
API: <a href="/api/set.html">set()</a>, <a href="/api/toggle.html">toggle()</a>.<br/>
JSFiddle Example: <a href="http://jsfiddle.net/tjansen/Un7QF/">CSS Classes</a>
</p>


<h3><a name="style_hasclass">Check for CSS Classes</a></h3>
<p>
<pre>var isMyclass = $('#elem').is('.myclass');</pre>
<span class="var">is()</span> returns <span class="var">true</span> if all list members match the given selector.
</p>
<p>
API: <a href="/api/is.html">is()</a>.<br/>
JSFiddle Example: <a href="http://jsfiddle.net/tjansen/ghPaC/">CSS Classes</a>
</p>


<h3><a name="style_set">Get and Set CSS Style</a></h3>
<p>
<pre>$('#someSpan').set({$backgroundColor: '#ff0'});</pre>
Use <span class="var">set()</span> with a '$'-prefixed name to set CSS styles. <span class="var">get()</span> reads the effective CSS 
style of the first element in the list:
<pre>var color = $('#someSpan').get('$backgroundColor');</pre>
Please note that Minified uses camel case for CSS names, so it is "$backgroundColor", not "$background-color". 
</p>
<p>
API: <a href="/api/get.html">get()</a>, <a href="/api/set.html">set()</a>.<br/>
</p>


<h3><a name="style_prop">Get and Set Properties</a></h3>
<p>
<pre>$('#someTextField').set({value: 'New text...'});</pre>
Use <span class="var">set()</span> with a unprefixed name to set properties. <span class="var">get()</span> reads properties of the first element
in the list:
<pre>var value = $('#someTextField').get('value');</pre>
</p>
<p>
API: <a href="/api/get.html">get()</a>, <a href="/api/set.html">set()</a>.<br/>
</p>


<h2><a name="anim">Animation</a></h2>

<h3><a name="anim_anim">Animate Styles and Properties</a></h3>
<p>
<pre>$('.moving').animate({$width: '100px'}, 750);</pre>
<span class="var">animate()</span> shares the name/value syntax with <span class="var">set()</span>, but will smoothly transition numbers and colors. You
can specify the duration of the animation as well as the interpolation algorithm to be used.
</p>
<p>
If you need to transition an object back and forth between two states, it is usually better to animate using <span class="var">toggle()</span>
<pre>var myToggle = $('.moving').toggle({$width: '100px'}, {$width: '200px'}, 750);

$('#widthToggle').on('click', myToggle);
$('#width100').on('click', myToggle, [false]);
$('#width200').on('click', myToggle, [true]);
</pre>
<p>
API: <a href="/api/animate.html">animate()</a>, <a href="/api/set.html">set()</a>, 
<a href="/api/toggle.html">toggle()</a>.<br/>
JSFiddle Example: <a href="http://jsfiddle.net/tjansen/tqsCg/">Animation</a>, <a href="http://jsfiddle.net/tjansen/xw7nQ/">Toggle</a>
</p>


<h3><a name="anim_chain">Chain Animation Steps</a></h3>
<p>
<pre>
$('.colChanger').animate({$backgroundColor: '#f00'}, 750)
                     .then(function(list) {
				return $('.colChanger').animate({$backgroundColor: '#0f0'}, 750)
		     })
                     .then(function(list) {
				$('.colChanger').animate({$backgroundColor: '#000'}, 750)
		     });
</pre>
<span class="var">animate()</span> returns a <a href="/api/promise.html">Promise</a> that can be used to 
chain <span class="var">animate()</span> invocations, so that you can start another <span class="var">animate()</span> when 
the previous animation ended.
</p>
<p>
API: <a href="/api/animate.html">animate()</a>, <a href="/api/promise.html">Promise</a>, 
<a href="/api/then.html">then()</a>.<br/>
JSFiddle Example: <a href="http://jsfiddle.net/tjansen/NrGnf/">Animation Chain</a>
</p>


<h3><a name="anim_toggle">Toggle Styles and Properties</a></h3>
<p>
<pre>var myToggle = $('.resizing).toggle({$width: '100px'}, {$width: '200px'}, 750);

$('#widthToggle').on('click', myToggle);
$('#width100').on('click', myToggle, [false]);
$('#width200').on('click', myToggle, [true]);
</pre>
Toggles are functions that can toggle the state of a list's elements between two sets of values. 
You can go to a specific state by calling the toggle with a boolean, or toggle between the states
by calling it either without arguments or with a non-boolean argument. Toggles are animated when you set a duration, but you
can also skip the duration to toggle instantly.
</p>
<p>
API: <a href="/api/toggle.html">toggle()</a>.<br/>
JSFiddle Example: <a href="http://jsfiddle.net/tjansen/xw7nQ/">Toggle</a>, 
<a href="http://jsfiddle.net/tjansen/USMfD/">Fade/Slide Toggle</a>
</p>


<h3><a name="anim_fade">Fade in / Fade Out (Animation)</a></h3>
<p>
<pre>$('.myElem1').animate({$$fade: 1}, 500); // fade in
$('.myElem2').animate({$$fade: 0}, 500); // fade out
var fadeToggle = $('.myElem3').toggle({$$fade: 0}, {$$fade: 1}, 500);
</pre>
Use the virtual property <span class="var">$$fade</span> to fade elements in and out.
</p>
<p>
API: <a href="/api/animate.html">animate()</a>, <a href="/api/set.html">set()</a>, 
<a href="/api/toggle.html">toggle()</a>.<br/>
JSFiddle Example: <a href="http://jsfiddle.net/tjansen/USMfD/">Fade/Slide Toggle</a>
</p>


<h3><a name="anim_slide">Slide in / Slide Out (Animation)</a></h3>
<p>
<pre>$('.myElem1').animate({$$slide: 1}, 500); // slide in
$('.myElem2').animate({$$slide: 0}, 500); // slide out
var slideToggle = $('.myElem3').toggle({$$slide: 0}, {$$slide: 1}, 500);
</pre>
Use the virtual property <span class="var">$$slide</span> to slide elements in and out.
</p>
<p>
API: <a href="/api/animate.html">animate()</a>, <a href="/api/set.html">set()</a>, 
<a href="/api/toggle.html">toggle()</a>.<br/>
JSFiddle Example: <a href="http://jsfiddle.net/tjansen/USMfD/">Fade/Slide Toggle</a>
</p>


<h3><a name="anim_loop">Create Complex Animations (Loop)</a></h3>
<p>
<pre>$.loop(function(t) {
	$('.swinging').set({$top: (100 + 50*Math.sin(2*Math.PI * t / 5000)) + 'px'});
});</pre>
For complex animations that can not be expressed with <span class="var">animate()</span>, <span class="var">$.loop()</span> allows you to 
register a function that will be invoked at a browser-controlled frame-rate. It uses the browser's 
<span class="var">requestAnimationFrame</span> function if available.
</p>
<p>
API: <a href="/api/animate.html">animate()</a>, <a href="/api/loop.html">loop()</a>, 
<a href="/api/set.html">set()</a>.<br/>
JSFiddle Example: <a href="http://jsfiddle.net/tjansen/Xu6R8/">Loop Animation</a>
</p>


<h2><a name="event">Data and Events</a></h2>
<h3><a name="event_events">Register / Unregister Event Handlers</a></h3>
<p>
<pre>function buttonHandler(e) { 
	window.alert('Button pressed. Unregister now.');
	$.off(buttonHandler);
}
$('#myButton').on('click', buttonHandler);</pre>
Use <span class="var">on()</span> to register an event handler for one or more events. <span class="var">$.off()</span> 
unregisters event handlers.<br/>
Please note that <span class="var">on()</span> is a bit different than other libraries' event registration: by default, Minified will disable 
event forwarding and the event's default action. If you want to allow event processing, you must prefix the event name with a 
pipe ('|'). A '?' prefix will let the handler decide whether to stop even processing. Return <span class="var">false</span> to stop it.
</p>
<p>
API: <a href="/api/on.html">on()</a>, <a href="/api/off.html">off()</a>.<br/>
</p>

<h3><a name="event_onover">Register for Mouseover Events</a></h3>
<p>
<pre>function mouseoverHandler(isOver, index) { 
	if (isOver)
		console.log('is over element ', index);
	else
		console.log('left element ', index);
}
$('.activeSpots').onOver(mouseoverHandler);</pre>
It is a bit difficult to set up mouseover events in a way that it works on all browsers, so Minified offers 
you <span class="var">onOver()</span> as a convenient way to handle mouseover and mouseleave-like events. The handler is called with 
<span class="var">true</span> if the mouse enters the element, and <span class="var">false</span> when it leaves. <span class="var">onOver()</span> prevents flickering - 
it is guaranteed that the handler is not called twice with the same value for the same element.<br/>
As a bonus, because of the way the event handler is called, you can pass a toggle directly to <span class="var">onOver()</span>:
<pre>$('#mySpot').onOver($('#mySpot').toggle({$color: 'white'}, {$color: 'red'}));</pre>
</p><p>
API: <a href="/api/onover.html">onOver()</a>, <a href="/api/toggle.html">toggle()</a>.<br/>
</p>


<h3><a name="event_onchange">Monitor a Text Field</a></h3>
<p>
<pre>$('#myNumber').onChange(function(newValue) { 
    $('#output').fill(newValue);
});</pre>
<var>onChange()</var> allows you to register a callback function that will be called the content of an input field changes. It also works with checkboxes and radio boxes.
</p>
<p>
API: <a href="/api/onchange.html">onChange()</a>.<br/>
JSFiddle Example: <a href="http://jsfiddle.net/tjansen/HUzFh/">onChange()</a>
</p>


<h3><a name="event_selector">Select Bubbled Events (Live/Delegates Events)</a></h3>
<p>
<pre>
$('#container').on('click', myHandler, 'div.monitored');</pre>
Using an extra selector you can make <span class="var">on()</span> limit events to those that bubbled up from elements 
described by the selector. This allows you to set up event handlers in parent elements and let events bubble up, 
so you need less (potentially resource-hungry) event handlers. Also, you may not need to add new event handlers 
when you add child elements to a monitored parent element, which is mostly useful if you work with <span class="var">innerHTML</span> 
to add child elements.
</p><p>
API: <a href="/api/on.html">on()</a>.<br/>
</p>


<h3><a name="event_trigger">Trigger an Event</a></h3>
<p>
<pre>$('#myElement').on('click', myHandler);
$('#myElement').trigger('click', {msg: 'Just triggered it')});</pre>
You can use <span class="var">trigger()</span> to invoke any event handler previously registered using <span class="var">on()</span>. The 
handler(s) will receive <span class="var">trigger()</span>'s second parameter as event object. <br/>
<span class="var">trigger()</span> emulates event bubbling, but will not send a DOM 
event to the browser and thus does not emulate the event default behaviour. 
</p><p>
API: <a href="/api/on.html">on()</a>, <a href="/api/trigger.html">trigger()</a>.<br/>
</p>


<h3><a name="event_custom">Create Custom Events</a></h3>
<p>
<pre>$('#myElement').on('myOwnEventType', myHandler);
$('#myElement').trigger('myOwnEventType', {msg: 'Just triggered it')});</pre>
You can create your own event type by just making up a event type name and register for it using <span class="var">on()</span>. 
They can then be triggered using <span class="var">trigger()</span>. 
</p><p>
API: <a href="/api/on.html">on()</a>, <a href="/api/trigger.html">trigger()</a>.<br/>
</p>



<h2><a name="data">Data and Events</a></h2>
<h3><a name="data_post">Do HTTP Requests (AJAX / XHR)</a></h3>
<p><pre>$.request('post', '/example/service', {param1: 'hello', param2: 5})
    .then(function success(result) {
    	$('#result').fill(result);
    })
    .error(function(status, statusText, responseText) {
		$('#result').fill('Got an error.');
	});;</pre>
<span class="var">$.request()</span> executes HTTP requests asynchronously. You have to specify the method and URL 
to use, as well as data to send. 
For GET requests the data is either a map of parameters or a string to append to the URL. 
For POST requests, it can either be a map of form parameters, a string or XML. The result  of the request is returned 
as a <a href="/api/promise.html">Promise</a>.
</p>
<p>
API: <a href="/api/request.html">request()</a>, <a href="/api/promise.html">Promise</a>.<br/>
JSFiddle Example: <a href="http://jsfiddle.net/tjansen/ncQrp/">Request / JSON</a>
</p>


<h3><a name="data_values">Read and Send a Form</a></h3>
<p><pre>var result = $.request('post', '/example/service', $('#myForm').values());</pre>
<span class="var">values()</span> reads a HTML form and returns its data in a format that it can be send using a 
POST request with <span class="var">$.request()</span>. Unlike real form submission, the browser will not leave the page 
when you use <span class="var">values()</span>.
</p>
<p>
API: <a href="/api/request.html">request()</a>, <a href="/api/values.html">values()</a>.<br/>
</p>


<h3><a name="data_json">Use JSON</a></h3>
<p><pre>var jsonString = $.toJSON({a:1, b: 'test', c: [1, 2]});
var obj = $.parseJSON(jsonString);</pre>
<span class="var">$.toJSON()</span> and <span class="var">$.parseJSON()</span> convert between JSON strings and JavaScript structures. If you want to send
JSON in an HTTP request, just convert the JavaScript structure to a string using <span class="var">$.toJSON()</span>. To evaluate a
JSON response, use <span class="var">$.parseJSON()</span> for the conversion.
</p>
<p>
API: <a href="/api/parsejson.html">parseJSON()</a>, <a href="/api/tojson.html">toJSON()</a>, 
<a href="/api/request.html">request()</a>.<br/>
JSFiddle Example: <a href="http://jsfiddle.net/tjansen/ncQrp/">Request / JSON</a>
</p>


<h3><a name="data_resttemplate">Call a Rest-style URL</a></h3>
<p>
<var>$.request()</var> only supports URL-parameters out of the box, but not parameters baked into the URL. If you need them, 
<var>_.format()</var> comes in handy:
<pre>var url = _.format('http://myservice/weather/{{zip}}/dur/{{days}}/', {zip: 90210, days: 3}, escape);
var response = $.request('get', url, {language: 'EN'});
</pre>
The example above creates a dynamic URL using <var>_.format()</var> and JavaScript's built-in <var>escape</var> function for URL escaping. 
It also adds a regular URL parameter <var>language</var> in the <var>$.request()</var> invokation. The URL to be invoked by
<var>$.request()</var> is:
<pre>http://myservice/weather/90210/dur/3/?language=EN</pre>
</p>
<p>
API: <a href="/api/format.html">_.format()</a>, <a href="/api/request.html">$.request()</a>.<br/>
</p>


<h3><a name="data_cookie">Read / Write / Delete Cookies</a></h3>
<p><pre>$.setCookie('counter', (parseInt($.getCookie('counter')) || 0) + 1, 14); // 14 days valid 
</pre>
<span class="var">$.getCookie()</span> and <span class="var">$.setCookie()</span> allow you to read and write cookies. 
To delete a cookie, set an expiration date in the past like this:
<pre>$.setCookie('numberOfVisits', '', -1);</pre>
</p>
<p>
API: <a href="/api/getcookie.html">getCookie()</a>, <a href="/api/setcookie.html">setCookie</a>.<br/>
</p>



<h2><a name="formats">Formats and Templates</a></h2>
<h3><a name="formats_formatnumber">Format a Number</a></h3>
<p><pre>var n1 = _.formatValue('#.###', Math.PI); // n1 == '3.142'
var n2 = _.formatValue('0.00', 4.2);      // n2 == '4.20'
var n3 = _.formatValue('0000', 51.7);     // n3 == '0052'
var n4 = _.formatValue('###.###.###,0', 8426.47);  // n4 == '8.426,5'
</pre>
<span class="var">_.formatValue()</span> formats a number into a string using the given format. 
'#' is used as a placeholder for optional digits, and '0' is a placeholder for digits that are required.
As decimal separator and for grouping you can either use ',' or '.', as required for internationalization.
</p>
<p>
API: <a href="/api/formatvalue.html">_.formatValue()</a>.<br/>
JSFiddle Example: <a href="http://jsfiddle.net/tjansen/H3VLW/">Number Formats</a>
</p>


<h3><a name="formats_formatdate">Format a Date</a></h3>
<p><pre>var d1 = _.formatValue('YY/MM/dd', new Date()); // e.g. '13/10/21'
var d2 = _.formatValue('HH:mm:ss', new Date()); // e.g. '21:30:02'
var d3 = _.formatValue('n MM y', new Date());   // e.g. 'Oct 21 2013'
var d4 = _.formatValue('yyyy-MM-ddTHH:mm:ss.SS z', new Date());  // e.g. '2013-10-21T21:30:02.977 +0200'
</pre>
<span class="var">_.formatValue()</span> formats a Date into a string using the given format. 
Please consult the API docs for the meaning of the placeholders.
</p>
<p>
API: <a href="/api/formatvalue.html">_.formatValue()</a>.<br/>
JSFiddle Example: <a href="http://jsfiddle.net/tjansen/rtNG5/">Date Formats</a>
</p>


<h3><a name="formats_parsedate">Parse a Date</a></h3>
<p><pre>var d1 = _.formatValue('YY/MM/dd', '13/10/21');
</pre>
<span class="var">_.parseDate()</span> parses the date in a string using a date format string that describes it.
The format syntax is shared with <var>_.formatDate()</var>. Please consult the API docs for the meaning of the placeholders.
</p>
<p>
API: <a href="/api/formatvalue.html">_.formatValue()</a>, <a href="/api/parsevalue.html">_.parseValue()</a>.<br/>
JSFiddle Example: <a href="http://jsfiddle.net/tjansen/rtNG5/">Date Formats</a>
</p>


<h3><a name="formats_parsedate">Create a Template</a></h3>
<p><pre>var tpl = _.template('{{if title}}{{title}} {{/if}}{{firstName}} {{lastName}}');
var fullName1 = tpl({title: 'Dr', firstName: 'Yevgeniy', lastName: 'Petrov'});
var fullName2 = tpl({firstName: 'Libby', lastName: 'Kegler'});
</pre>
<span class="var">_.template()</span> creates a template function that can be called with the template's arguments
to create a string. Often it is more convenient to use <span class="var">_.format()</span> which uses the same syntax
but does not require the extra-step of invoking the template: 
<pre>var fullName = _.format('{{if title}}{{title}} {{/if}}{{firstName}} {{lastName}}', 
        {title: 'Dr', firstName: 'Yevgeniy', lastName: 'Petrov'});
</pre>
Minified caches all templates that it creates. Unless you create a very large number of templates, there is no noticable performance 
difference between <span class="var">_.template()</span> and <span class="var">_.format()</span>.
</p>
<p>Minified has a few additional functions that work with templates:
<ul><li><var>formatHtml()</var> adds HTML-escaping to <span class="var">_.format()</span>.</li>
<li><var>ht()</var> replaces the HTML of DOM elements with the template's output.</li>
<li><var>HTML()</var> creates DOM elements with a template.</li> 
</ul> 
</p>
<p>
API: <a href="/api/format.html">_.format()</a>, <a href="/api/formathtml.html">_.formatHtml()</a>, 
<a href="/api/ht.html">ht()</a>, <a href="/api/html.html">HTML()</a>, 
<a href="/api/template.html">_.template()</a>.<br/>
</p>




<h3><a name="something_missing">Missing Something?</a></h3>
<p>Looking for something but can't find it here? Please write a mail to <a href="mailto:tim@tjansen.de">tim@tjansen.de</a> 
('Minified' in the subject to gets you past the spam filter).</p>
</div>

`}
